// Reference: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  image         String?
  emailVerified String?
  accounts      Account[]
  sessions      Session[]
  lists         List[]
  movies        Movie[]
}

model List {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title     String
  isPublic  Boolean  @default(false)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  movies    Movie[]
}

model Movie {
  id          String   @id @default(cuid())
  movieDbId   Int
  createdAt   DateTime @default(now())
  title       String
  imdbId      String?
  tagline     String?
  description String?
  runtime     Int?
  image       String
  year        String
  genres      String[]
  isWatched   Boolean  @default(false)
  isFavorite  Boolean  @default(false)
  listId      String
  userId      String
  list        List     @relation(fields: [listId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
